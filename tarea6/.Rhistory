spam.data %<>% mutate(class = as.character(class))
View(spam.data)
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
View(spam.train.r)
spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
View(spam.train.r)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_predictors()) %>%
prep()
spam.data = read_csv("spambase.data", col_names = FALSE)
spam.data <- spam.data %>% rename(class = X58)
spam.data %<>% mutate(class = as.factor(class))
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
View(spam.train.r)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(class) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.data = read_csv("spambase.data", col_names = FALSE)
spam.data <- spam.data %>% rename(y = X58)
spam.data %<>% mutate(class = as.factor(class))
spam.data = read_csv("spambase.data", col_names = FALSE)
spam.data <- spam.data %>% rename(y = X58)
spam.data %<>% mutate(y = as.factor(y))
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
# Train - Test split
spam.split <- createDataPartition(spam.data$y, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(y ~ ., data = spam.train) %>%
step_factor2string(y) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(y ~ ., data = spam.train.r)
spam.data = read_csv("spambase.data", col_names = FALSE)
spam.data <- spam.data %>% rename(class = X58)
spam.data %<>% mutate(class = as.factor(class))
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(class) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
View(spam.train.r)
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all.equal.factor()) %>%
prep()
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
install.packages("klaR")
library(klaR)
help("NaiveBayes")
NaiveBayes(spam.train.r[,-58], spam.train.r[,58])
spam.train.r[,58]
pull(spam.train.r[,58])
NaiveBayes(spam.train.r[,-58], pull(spam.train.r[,58]))
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(class ~ ., data = spam.train.r)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy.model_spec(spam.train.r[,-58], pull(spam.train.r[,58]))
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy.model_spec(spam.train.r[,-58], pull(spam.train.r[,58]), formula = class ~ .)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy.model_spec(formula = class ~ ., data = spam.train.r)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy.model_spec(spam.train.r[,-58], pull(spam.train.r[,58]), fL = 1)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(spam.train.r[,-58], pull(spam.train.r[,58]), fL = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(spam.train.r[,-58], pull(spam.train.r[,58]), fL = 1)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = pull(spam.train.r[,58]), fL = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = pull(spam.train.r[,58]))
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.nb.model = NaiveBayes(spam.train.r[,-58], pull(spam.train.r[,58]))
y_pred = predict(spam.nb.model, )
spam.nb.model
NaiveBayes(spam.train.r[,-58], pull(spam.train.r[,58]))
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58], Laplace = 1)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58], Laplace = 1, smoothness = 1)
spam.lr.model
spam.lr.model$spec
spam.lr.model$fit
spam.lr.model$spec
spam.lr.model$lvl
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(x = spam.train.r[,-58], y = spam.train.r[,58], Laplace = 1, smoothness = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58], Laplace = 1, smoothness = 1)
spam.lr.model$spec
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58], usekernel = FALSE)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
#fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
fit(class ~ ., Laplace = 1, smoothness = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
#fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
fit(class ~ ., data = spam.train.r, Laplace = 1, smoothness = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
#fit_xy(x = spam.train.r[,-58], y = spam.train.r[,58])
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r, smoothness = 1)
help
help(naive_Bayes)
naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
translate()
naive_Bayes(smoothness = .8) %>%
set_engine("klaR") %>%
translate()
spam.lr.model <- naive_Bayes(smoothness = .8) %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r, smoothness = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r, smoothness = 1)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.pca
# Train - Test split
spam.split <- createDataPartition(spam.pca$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.pca[as.vector(spam.split),]
spam.test <- spam.pca[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_log(all_predictors(), offset = 1) %>%
prep()
# Train - Test split
spam.split <- createDataPartition(spam.pca$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.pca[as.vector(spam.split),]
spam.test <- spam.pca[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
data
data
data
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
# Train - Test split
spam.split <- createDataPartition(spam.pca$class, p = .8,
list = FALSE,
times = 1)
#spam.data <- spam.data %<>% mutate(class = as.character(class))
spam.train <- spam.pca[as.vector(spam.split),]
spam.test <- spam.pca[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.data = read_csv("spambase.data", col_names = FALSE)
spam.data <- spam.data %>% rename(class = X58)
spam.data %<>% mutate(class = as.factor(class))
log_m <- function(x) log(x+0.001)
spam.data %<>% mutate_if(is.numeric, log1p)
# Data PCA
spam.pca <- as.data.frame(predict(pr, newdata = spam.data))
spam.pca <- cbind(spam.pca[,c(1,2)], spam.data$class)
names(spam.pca)[3] <- "class"
# Train - Test split
spam.split <- createDataPartition(spam.pca$class, p = .8,
list = FALSE,
times = 1)
spam.train <- spam.pca[as.vector(spam.split),]
spam.test <- spam.pca[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
plot(spam.lr.model$fit)
plot(spam.lr.model$spec)
plot(spam.lr.model$preproc)
plot(spam.lr.model$fit)
spam.data
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
spam.test <- spam.data[-as.vector(spam.split),]
spam.train <- spam.data[as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.recipe = recipe(class ~ ., data = spam.train) %>%
step_factor2string(all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.nb.model <- naive_Bayes(mode = "classification") %>%
set_engine("klaR") %>%
fit(class ~ ., data = spam.train.r)
spam.nb.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
plot(spam.nb.model$fit)
# Train - Test split
spam.split <- createDataPartition(spam.data$class, p = .8,
list = FALSE,
times = 1)
spam.train <- spam.data[as.vector(spam.split),]
spam.test <- spam.data[-as.vector(spam.split),]
spam.recipe = recipe(class ~ ., data = spam.train) %>%
#step_log(all_predictors(), offset = 1) %>%
prep()
spam.train.r = bake(spam.recipe, spam.train)
spam.test.r = bake(spam.recipe, spam.test)
spam.lr.model = logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model
spam.lr.model = logistic_reg(mode = "classification") %>%
set_engine("glm") %>%
fit(class ~ ., data = spam.train.r)
spam.lr.model %>%
predict(spam.test.r) %>%
bind_cols(spam.test.r) %>%
metrics(truth = class, estimate = .pred_class)
spam.lr.model$spec
summary(spam.lr.model$spec)
summary(spam.lr.model$spec)
spam.lr.model$spec
spam.lr.model$spec$method
summary(spam.lr.model$spec$method)
spam.lr.model$spec$args
spam.lr.model$spec$eng_args
spam.lr.model$spec$mode
spam.lr.model$spec$engine
spam.lr.model$spec$defaults
spam.lr.model$fit$model
summary(spam.lr.model$fit$model)
summary(spam.lr.model$fit$R
)
summary(spam.lr.model$fit$R
;
summary(spam.lr.model$fit$coefficients
)
spam.lr.model$fit$coefficients
spam.lr.model$fit$residuals
spam.lr.model$fit$fitted.values
spam.lr.model$fit$effects
summary(spam.lr.model$fit)
with(spam.lr.model$fit, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
with(spam.lr.model, null.deviance - deviance)
with(spam.lr.model$fit, null.deviance - deviance)
with(spam.lr.model$fit, df.null - df.residual)
with(spam.lr.model$fit, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
