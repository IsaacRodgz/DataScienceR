tune_bayes(
tree.wflow,
resamples = folds,
# To use non-default parameter ranges
param_info = tree.set,
# Generate five at semi-random to start
initial = 3,
iter = 30,
# How to measure performance?
metrics = metric_set(roc_auc),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
install.packages("C50")
library(C50)
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
# To use non-default parameter ranges
param_info = tree.set,
# Generate five at semi-random to start
initial = 3,
iter = 30,
# How to measure performance?
metrics = metric_set(roc_auc),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
wine.dt = decision_tree(mode = "classification",
min_n = tune()) %>%
set_engine("C5.0")
tree.wflow =
workflow() %>%
add_model(wine.dt) %>%
add_recipe(wine.recipe)
tree.set <- parameters(tree.wflow)
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
# To use non-default parameter ranges
param_info = tree.set,
# Generate five at semi-random to start
initial = 3,
iter = 30,
# How to measure performance?
metrics = metric_set(roc_auc),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
View(search_res)
estimates = collect_metrics(search_res) %>% arrange(.iter)
View(estimates)
show_best(search_res, metric = "roc_auc")
autoplot(search_res, type = "performance")
View(estimates)
select_best(search_res, metric = "roc_auc")
wine.dt.model = wine.dt %>% fit(classdigit ~ ., data = wine.train)
show_best(search_res, metric = "roc_auc")
wine.dt = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("C5.0")
wine.dt.model = wine.dt %>% fit(classdigit ~ ., data = wine.train)
View(wine.dt.model)
wine.dt %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
rpart.plot(wine.dt.model$fit, roundint = FALSE)
plot(wine.dt.model$fit, roundint = FALSE)
plot(wine.dt.model$fit)
plot(wine.dt.model$fit$tree)
wine.dt.model
plot(wine.dt.model)
View(wine.dt.model)
View(wine.dt)
plot(wine.dt)
plot(wine.dt)
plot(wine.dt.model)
wine.dt = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("C5.0")
wine.dt.model = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("C5.0")
wine.dt.model = wine.dt %>% fit(classdigit ~ ., data = wine.train)
wine.dt.model = wine.dt.model %>% fit(classdigit ~ ., data = wine.train)
wine.dt.model = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("C5.0")
wine.dt.model = wine.dt.model %>% fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
plot(wine.dt.model)
summary(wine.dt.model)
summary(wine.dt.model$fit)
plot(wine.dt.model$fit)
summary(wine.dt.model$fit)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
wine.dt.model$fit
wine.recipe = recipe(classdigit ~ ., data = wine.data.train) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes()) %>%
prep()
wine.train = juice(wine.recipe)
wine.test = wine.recipe %>%
bake(wine.data.test)
wine.dt.model = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("C5.0")
wine.dt.model = wine.dt.model %>% fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
wine.data.train = read_tsv("wine.train.txt")
wine.data.test = read_tsv("wine.test.txt")
wine.data.train %<>% mutate(classdigit = as.factor(classdigit))
wine.data.test %<>% mutate(classdigit = as.factor(classdigit))
wine.data.test = select (wine.data.test, -c(class))
wine.recipe = recipe(classdigit ~ ., data = wine.data.train) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes()) %>%
prep()
wine.train = juice(wine.recipe)
wine.test = wine.recipe %>%
bake(wine.data.test)
wine.dt.model = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("C5.0") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
wine.dt.model
summary(wine.dt.model$fit)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
wine.dt.model = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
text(wine.dt.model$fit, pretty = 0)
wine.data.train = read_tsv("wine.train.txt")
wine.data.test = read_tsv("wine.test.txt")
wine.data.train %<>% mutate(classdigit = as.factor(classdigit))
wine.data.test %<>% mutate(classdigit = as.factor(classdigit))
wine.data.test = select (wine.data.test, -c(class))
wine.recipe = recipe(classdigit ~ ., data = wine.data.train) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes()) %>%
prep()
wine.train = juice(wine.recipe)
wine.test = wine.recipe %>%
bake(wine.data.test)
wine.dt = decision_tree(mode = "classification",
min_n = tune(),
cost_complexity = tune()) %>%
set_engine("rpart")
wine.dt
folds <- vfold_cv(wine.train, repeats = 2)
tree.wflow =
workflow() %>%
add_model(wine.dt) %>%
add_recipe(wine.recipe)
tree.set <- parameters(tree.wflow)
tree.set
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
param_info = tree.set,
initial = 3,
iter = 30,
metrics = metric_set(roc_auc),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
param_info = tree.set,
initial = 3,
iter = 30,
control = control_bayes(no_improve = 20, verbose = TRUE)
)
show_best(search_res, metric = "roc_auc")
autoplot(search_res, type = "performance")
show_best(search_res, metric = "accuracy")
show_best(search_res, metric = c("accuracy", "roc_auc"))
show_best(search_res, metric = "roc_auc")
show_best(search_res, metric = "accuracy")
show_best(search_res, metric = "roc_auc")
autoplot(search_res, type = "performance")
show_best(search_res, metric = "accuracy")
show_best(search_res, metric = "roc_auc")
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
param_info = tree.set,
initial = 3,
iter = 30,
metrics = metric_set(roc_auc, accuracy),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
estimates = collect_metrics(search_res) %>% arrange(.iter)
View(estimates)
show_best(search_res, metric = "accuracy")
show_best(search_res, metric = "roc_auc")
autoplot(search_res, type = "performance")
wine.recipe = recipe(classdigit ~ ., data = wine.data.train) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes()) %>%
prep()
wine.train = juice(wine.recipe)
wine.test = wine.recipe %>%
bake(wine.data.test)
wine.dt.model = decision_tree(mode = "classification",
min_n = 2) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0.000000000133) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
text(wine.dt.model$fit, pretty = 0)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
library(rpart.plot)
rpart.plot(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
wine.dt.model = decision_tree(mode = "classification") %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
# Evaluation metrics
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
# Analyze results
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
plot(wine.dt.model$fit,  main = 'Iris decision tree')
text(wine.dt.model$fit, pretty = 0)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0.000000000133) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
# Evaluation metrics
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
# Analyze results
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
autoplot(search_res, type = "performance")
View(estimates)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.data.train = read_tsv("wine.train.txt")
wine.data.test = read_tsv("wine.test.txt")
wine.data.train %<>% mutate(classdigit = as.factor(classdigit))
wine.data.test %<>% mutate(classdigit = as.factor(classdigit))
wine.data.test = select (wine.data.test, -c(class))
wine.recipe = recipe(classdigit ~ ., data = wine.data.train) %>%
#step_center(all_predictors(), -all_outcomes()) %>%
#step_scale(all_predictors(), -all_outcomes()) %>%
prep()
wine.train = juice(wine.recipe)
wine.test = wine.recipe %>%
bake(wine.data.test)
wine.dt = decision_tree(mode = "classification",
min_n = tune(),
cost_complexity = tune()) %>%
set_engine("rpart")
folds <- vfold_cv(wine.train, repeats = 2)
tree.wflow =
workflow() %>%
add_model(wine.dt) %>%
add_recipe(wine.recipe)
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
param_info = tree.set,
initial = 5,
iter = 30,
metrics = metric_set(roc_auc, accuracy),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
View(wine.train)
estimates = collect_metrics(search_res) %>% arrange(.iter)
show_best(search_res, metric = "accuracy")
show_best(search_res, metric = "roc_auc")
autoplot(search_res, type = "performance")
wine.recipe = recipe(classdigit ~ ., data = wine.data.train) %>%
#step_center(all_predictors(), -all_outcomes()) %>%
#step_scale(all_predictors(), -all_outcomes()) %>%
prep()
wine.train = juice(wine.recipe)
wine.test = wine.recipe %>%
bake(wine.data.test)
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0.0000186) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0.0000000937) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
tidy(wine.dt.model)
tidy(wine.dt.model$fit)
tidy(wine.dt)
tidy(wine.dt.model)
summary.rpart(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Color)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Alcohol)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Phenols)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Flav)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = OD)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Proline)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Color)) +
geom_boxplot() + xlab("cultivar")
rpart.plot(wine.dt.model$fit, roundint=FALSE)
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Proline)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = OD)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = OD)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Proline)) +
geom_boxplot() + xlab("cultivar")
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = OD)) +
geom_boxplot() + xlab("cultivar")
rpart.plot(wine.dt.model$fit, roundint=FALSE)
ggplot(data = wine.data.train, mapping = aes(x = classdigit, y = Color)) +
geom_boxplot() + xlab("cultivar")
rpart.plot(wine.dt.model$fit, roundint=FALSE)
summary(wine.dt.model$fit)
wine.dt = decision_tree(mode = "classification",
min_n = tune(),
cost_complexity = 0) %>%
set_engine("rpart")
folds <- vfold_cv(wine.train, repeats = 2)
tree.wflow =
workflow() %>%
add_model(wine.dt) %>%
add_recipe(wine.recipe)
tree.set <- parameters(tree.wflow)
search_res =
tune_bayes(
tree.wflow,
resamples = folds,
param_info = tree.set,
initial = 5,
iter = 30,
metrics = metric_set(roc_auc, accuracy),
control = control_bayes(no_improve = 20, verbose = TRUE)
)
show_best(search_res, metric = "accuracy")
show_best(search_res, metric = "roc_auc")
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.dt.model = decision_tree(mode = "classification",
min_n = 15,
cost_complexity = 0) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
0.0000000937
wine.dt.model = decision_tree(mode = "classification",
min_n = 8,
cost_complexity = 0.0000000937) %>%
set_engine("rpart") %>%
fit(classdigit ~ ., data = wine.train)
wine.dt.model %>%
predict(wine.test) %>%
bind_cols(wine.test) %>%
metrics(truth = classdigit, estimate = .pred_class)
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
pr <- prcomp(usair.data)$x[, 1:2]
pr <- prcomp(wine.data.train)
pr <- prcomp(wine.data.train[-14])
pr = prcomp(wine.data.train[-14])
summary(pr)
pr
summary(pr)
plot(x = wine.data.train$classdigit, y = predict(pr)[,1], xlab = "Score", ylab = "Proyección PC1")
plot(x = wine.data.train$classdigit, y = pr[,1], xlab = "Score", ylab = "Proyección PC1")
plot(x = wine.data.train$classdigit, y = pr$rotation[,1], xlab = "Score", ylab = "Proyección PC1")
pr$rotation
predict(pr)
plot(x = wine.data.train$classdigit, y = predict(pr)[,1], xlab = "Score", ylab = "Proyección PC1")
summary(pr)
View(pr)
plot(pr, type = "l")
pr$sdev
cumsum(pr$sdev)
cumsum(pr$sdev)[-1]
cumsum(pr$sdev)
cumsum(pr$sdev)
cumsum(pr$sdev)/sum(pr$sdev)
plot(cumsum(pr$sdev)/sum(pr$sdev))
plot(cumsum(pr$sdev)/sum(pr$sdev), xlab = "Num of PC")
plot(cumsum(pr$sdev)/sum(pr$sdev), xlab = "Num of PC", ylab = "Explained variance")
plot(cumsum(pr$sdev)/sum(pr$sdev), xlab = "Num of PC", ylab = "Explained variance")
plot(x = wine.data.train$classdigit, y = predict(pr)[,1], xlab = "Score", ylab = "Proyección PC1")
plot(cumsum(pr$sdev)/sum(pr$sdev), xlab = "Num of PC", ylab = "Explained variance")
pr
library(kohonen)
data_som <- som(as.matrix(wine.data.train), somgrid(2,1))
data_som <- som(as.matrix(wine.data.train[-14]), somgrid(2,1))
data_som <- som(as.matrix(wine.data.train[-14]), somgrid(3,1))
plot(data_som, type = "codes")
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(3,1))
plot(wine.som, type = "codes")
set.seed(101)
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(3,1))
plot(wine.som, type = "codes")
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(3,1))
plot(wine.som, type = "codes")
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(3,1))
plot(wine.som, type = "codes")
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(3,1))
plot(wine.som, type = "codes")
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(2,1))
plot(wine.som, type = "codes")
wine.som <- som(as.matrix(wine.data.train[-14]), somgrid(2,2))
plot(wine.som, type = "codes")
summary(wine.dt.model$fit)
rpart.plot(wine.dt.model$fit, roundint=FALSE)
